a = c(0, 2, 4)
b = c(1, 2, 3)
x = 0
x == a[1]
x == a[2]
x == a[1] | x == a[2] | x == a[3]
x %in% a
x %in% b
c = c(0, 1.2, 'k')
num = seq(from=1, to=10, by=2)
cha = rep(x = c('a', 'b'), each = 2)
lst1 = list(num, cha)
print(lst1)
class(lst1)
print("----------------------")
str(lst1)
lst2 = list(a = num, b = cha, c = lst1)
print(lst2)
lst1$a
lst2$a
lst2$b
lst2$c
#리스트 원소 추가
lst2$d <- 1:5
str(lst2)
# 리스트 원소 삭제
lst2$a = NULL
str(lst2)
# 리스트 원소 변경
lst2$b <- letters[1:5]
print(lst2)
print(lst2$b)
lst2$b[1] = 'A'
print(lst2$b)
num = seq(from = 1, to = 10, by = 2)
chr <- rep(x=c('a', 'b'), each=3)
df1 = data.frame(num, chr)
cha = letters[1:5]
df1 = data.frame(num, cha)
View(df1)
class(df1)
str(df1)
print(df1)
options('max.print')
print(df1)
View(df1)
# 데이터 프레임 원소 선택
df1[1,1]
df1[1,2]
df1[1:2, 1:2]
df1[1, ]
df1[1:2, ]
df1[:, 1]
df1[, 1]
df1[, 1:2] #행은 전부다, 1~2열
df1[, 'num']
df1[, c('num', 'cha')]
df1$num
df1$cha
# true/false로 반환받기
df1$num > 5
df1[df1$num >= 5, ]
df1$int = 11:15
View(df1)
# 데이터프레임 열 추가하기 : cbind()
cbind(df1, ref(x = TRUE, times = 5))
# 데이터프레임 열 추가하기 : cbind()
cbind(df1, rep(x = TRUE, times = 5))
cbind(df1, log = rep(x = TRUE, times = 5))
df1 = cbind(df1, log = rep(x = TRUE, times = 5))
df1 = cbind(df1, log = rep(x = TRUE, times = 5))
view(df1)
View(df1)
# 데이터프레임 행 추가하기 : rbind()
df3 = data.frame(num = 6, cha = 'f', int=16, log=TRUE)
print(df3)
rbind(df1, df3)
print(df1)
df1 = rbind(df1, df3)
View(df1)
df1 = rbind(df1, df3)
# 데이터프레임 원소 삭제
df1$num = NULL # 열 삭제
View(df1)
print(df1)
cbind(df1, log2 = rep(x = TRUE, times = 7)) # 행 개수가 일치해야함
df1 = cbind(df1, log = rep(x = TRUE, times = 5))
cbind(df1, log2 = rep(x = TRUE, times = 7)) # 행 개수가 일치해야함
# 데이터프레임 행 추가하기 : rbind()
df1 = data.frame(num = 6, cha = 'f', int=16, log=TRUE)
# 데이터프레임 행 추가하기 : rbind()
df3 = data.frame(num = 6, cha = 'f', int=16, log=TRUE)
rbind(df1, df3)
print(df3)
View(df1)
df1 = data.frame(num, chr)
cha = letters[1:5]
cha = letters[1:5]
class(df1)
print(df1)
str(df1)
num = seq(from = 1, to = 10, by = 2)
chr <- rep(x=c('a', 'b'), each=3)
df1 = data.frame(num, chr)
# 데이터 프레임 원소 선택
df1[1,1] # 1행 1열
df1[1,2]  # 1행 2열
df1[1:2, 1:2]   # 1~2행 1~2열
a = c(0, 2, 4)  # 자료형이 같아야 한다.
b = c(1, 2, 3)
c = c(0, 1.2, 'k')  # k 때문에 모두 문자로 인식
x = 0
x == a[1]
x == a[2]
x == a[1] | x == a[2] | x == a[3]
x %in% a  # x가 a에 포함되어 있나? true
x %in% b  # x가 b에 포함되어 있나? false
num = seq(from=1, to=10, by=2)
cha = rep(x = c('a', 'b'), each = 2)
lst1 = list(num, cha)
print(lst1)
class(lst1)
print("----------------------")
str(lst1)
lst2 = list(a = num, b = cha, c = lst1)
print(lst2)
str(lst2)
lst1$a
lst2$a
lst2$b
lst2$c
# 리스트 원소 추가
lst2$d <- 1:5
str(lst2)
# 리스트 원소 삭제
lst2$a = NULL
str(lst2)
# 리스트 원소 삭제
lst2$a = NULL
str(lst2)
# 리스트 원소 변경
lst2$b <- letters[1:5]
print(lst2)
print(lst2$b)
lst2$b[1] = 'A'
print(lst2$b)
num = seq(from = 1, to = 10, by = 2)
chr <- rep(x=c('a', 'b'), each=3)
df1 = data.frame(num, chr)
cha = letters[1:5]
df1 = data.frame(num, cha)
class(df1)
str(df1)
print(df1)
options('max.print') #dataframe 최대 출력 개수
print(df1)
View(df1)
df1[1,1] # 1행 1열
df1[1,2]  # 1행 2열
df1[1:2, 1:2]   # 1~2행 1~2열
df1[1, ]  # 1행 열 전체 (1,2열)
df1[1:2, ]  # 1~2행 열전체 (1,2열)
df1[, 1]  # 행은 전부다, 1열
df1[, 1:2]  # 행은 전부다, 1~2열
df1[, 'num']
df1[, c('num', 'cha')]
df1$num
df1$cha
# true/false로 반환받기
df1$num > 5
df1[df1$num >= 5, ]
df1$int = 11:15
View(df1)
# 데이터 프레임 원소 변경
print(df1)
# 데이터프레임 열 추가하기 : cbind()
cbind(df1, rep(x = TRUE, times = 5))
cbind(df1, log = rep(x = TRUE, times = 5))
cbind(df1, log2 = rep(x = TRUE, times = 7)) # 행 개수가 일치해야함
df1$int = 11:15
View(df1)
# 데이터프레임 열 추가하기 : cbind()
cbind(df1, rep(x = TRUE, times = 5))
cbind(df1, log = rep(x = TRUE, times = 5))
df1 = cbind(df1, log = rep(x = TRUE, times = 5))
View(df1)
cbind(df1, log2 = rep(x = TRUE, times = 7)) # 행 개수가 일치해야함
# 데이터프레임 행 추가하기 : rbind()
df3 = data.frame(num = 6, cha = 'f', int=16, log=TRUE)
print(df3)
rbind(df1, df3)
print(df1)
df1 = rbind(df1, df3)
View(df1)
# 데이터프레임 원소 삭제
df1$num = NULL # 열 삭제
View(df1)
print(df1)
# 행 또는 열 삭제하기
df1[-1, -1]
df1[-1, ] # 1행 삭제
df1[1, ] # 1행 출력
df1[, -1] # 1열 삭제
# 데이터 프레임 원소 변경
print(df1)
df1$cha = letters[1:6]
df1$int[1] = '22'
score <- 100
if(score>=70){
grade = "합격"
}else{
grade = "불합격"
}
print(grade)
score = seq(from=40, to=100, by=10)
score >= 70
ifelse(test = score >= 70)
ifelse(test = score >= 70, '합격', '불합격')
ifelse(test = score >= 70, '합격', '불합격')
ifelse(test = score >= 70, yes='합격', no='불합격')
df1 = data.frame(score)
print(df1)
str(df1)
df1$grade = ifelse(test = df1$score >= 70, yes='합격', no='불합격')
print(df1)
getwd()
menu = c('짜장면', '탕수육', '깐풍기', '짬뽕', '샥스핀', '양장피')
print(item)
for(item in menu){
print(item)
}
for(item in menu){
print(item, '시킬까요\n');
}
cat(item, '시킬까요\n');
menu = c('짜장면', '탕수육', '깐풍기', '짬뽕', '샥스핀', '양장피')
for(item in menu){
text = cat(item, '시킬까요\n');
print(text)
}
text = paste(item, '시킬까요\n'); # cat 반환 타입이 없다.
menu = c('짜장면', '탕수육', '깐풍기', '짬뽕', '샥스핀', '양장피')
for(item in menu){
text = paste(item, '시킬까요\n'); # cat 반환 타입이 없다.
print(text)
}
cat(item, '다음 메뉴는 뭔가요?\n', sep='?')
menu = c('짜장면', '탕수육', '깐풍기', '짬뽕', '샥스핀', '양장피')
for(item in menu){
if(item %in% c('짜장면', '짬뽕')){
cat(item, '요리부터 주문합시다!\n', sep='?')
}else{
cat(item, '다음 메뉴는 뭔가요?\n', sep='?')
}
}
menu = c('짜장면', '탕수육', '깐풍기', '짬뽕', '샥스핀', '양장피')
for(item in menu){
if(item %in% c('짜장면', '짬뽕')){
next
cat(item, '요리부터 주문합시다!\n', sep='?')
}else{
cat(item, '다음 메뉴는 뭔가요?\n', sep='?')
}
}
i = 0
repeat{
i = i+1;
print(i)
}
i = 0
while(TRUE) {
i = i + 1
if(i > 10000) break
print(i)
}
new_sum = function(x,y){
return (x+y)
}
print(new_sum(5, 4))
py = function(a,b){
return(sqrt(a^2 + b^2))
}
print(py(3,4))
getwd()
str(iris)
head(iris, n=3L)
table(iris)
tail(iris)
irisMat1 = as.matrix(iris) # 행렬로 변환
head(irisMat1)
irisMat2 = as.matrix(iris, 1:4) # 행렬로 변환하는데, 행 전체, 열은 1:4까지
irisMat2 = as.matrix(iris, 1:4) # 행렬로 변환하는데, 행 전체, 열은 1:4까지
irisMat2 = as.matrix(iris[, 1:4]) # 행렬로 변환하는데, 행 전체, 열은 1:4까지
head(irisMat2)
apply(X=iris[, 1:4], margin=1, FUN = mean)
apply(X=iris[, 1:4], MARGIN=1, FUN = mean)
apply(X=iris[, 1:4], MARGIN=2, FUN = mean)
apply(X=iris[, 1:4], MARGIN=2, FUN = sum)
list.files()
getwd()
setwd(dir='D:\\Dev\\Works\\R')
getwd()
list.files()
list.files()
write_xlsx(x = iris, path='iris.xlsx')
library(writex1) # import
install.packages('writexl') # 패키지 설치
library(writex1) # import
install.packages('writexl') # 패키지 설치
library(writexl) # import
write_xlsx(x = iris, path='iris.xlsx')
list.files()
install.packages('readxl') # 패키지 설치
library(readxl)
obj1 = read_xlsx(path='iris.xlsh')
obj1 = read_xlsx(path='iris.xlsx')
str(obj1)
write.csv(x-iris, file='iris.cvs')
write.csv(x=iris, file='iris.cvs')
list.files()
write.csv(x=iris, file='iris.csv')
list.files()
obj2 = read.csv(file='iris.csv')
str(obj2)
head(obj2)
fileName = 'APT_Price_Gangnam_2020.csv'
price = read.csv(fileName)
head(price)
price = read.csv(fileName, fileEncoding = 'utf-8')
head(price)
str(price)
